/*!
 * Codecolor.js v1.0.0
 * https://codecolorjs.pw/
 *
 * (c) 2018-2019 Daniil Ryazanov <opensource@tagproject.ru>
 * Released under the MIT License.
 */

(function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):(a=a||self,a.codecolor=b())})(this,function(){"use strict";const a="source";class b{constructor(a,b){this.name=void 0,this.expressions=void 0,this.keywords=void 0,this.masks=void 0,this.activeKeywords=void 0,this.activeExpressions=void 0,this.name=a,this.expressions=b.expressions.values,this.activeExpressions=b.expressions.names,this.keywords="object"==typeof b.keywords?b.keywords.values:[],this.activeKeywords="object"==typeof b.keywords?b.keywords.names:[],this.masks=b.masks}eachExp(a){this.expressions.forEach((b,c)=>{b.forEach((b,d)=>{a(this.activeExpressions[c],b,d)})})}getKeywordName(a){const b=a[0];let c,d=0;for(;(c=this.keywords[d])&&!(c[b]&&~c[b].indexOf(a));)d++;return this.activeKeywords[d]}getMask(a,b){let c;return"undefined"!=typeof this.masks&&Array.isArray(this.masks[a])&&!!this.masks[a][b]&&(c=this.masks[a][b]),c}}class c{constructor(a,b,c,d){this.name=void 0,this.value=void 0,this.start=void 0,this.end=void 0,this.ruleIndex=void 0,this.name=a,this.value=b,this.start=c,this.end=c+b.length,this.ruleIndex=d}isIncludedIn(a){return this.start>=a.start&&this.end<=a.end}isCross(a){return this.start>=a.start&&this.start<=a.end&&this.end>=a.end}isSource(){return this.name===a}}class d{static parse(a,b,c){const e=new d(a,b,c);return e.analize(),e.render()}constructor(a,b,c){this.code=void 0,this.languages=void 0,this.language=void 0,this.tokens=void 0,this.code=a,this.languages=c,this.language=c[b],this.tokens=[]}analize(){let a,b,d,e,f=NaN;const{tokens:g}=this,h=a=>~~(a/2),i=(a,b)=>{if(b<=g.length&&a<b){if(e=g[b-1],e.end<=d.start)return i(b,b+h(g.length-b+1));if(e.start>=d.end)return i(a,a+h(b-a));if(d.isIncludedIn(e))return-Infinity;if(e.isIncludedIn(d))return 1===b?1/0:-(b-1);if(e.isCross(d))return 1/0}return b};this.language.eachExp((e,j,k)=>{var l=Math.abs,m=Number.isFinite,n=Math.max;for(b=new RegExp(j,"gm");a=b.exec(this.code);)d=new c(e,a[0],a.index,k),0<=(f=i(0,n(h(g.length),1)))?m(f)?g.splice(f,0,d):g[0]=d:m(f)&&(g[l(f)]=d)})}wrap(b){const c=(a,b)=>`<span class="cc-${a}">${b}</span>`,e=b.isSource()?this.language.getKeywordName(b.value):b.name;let f;if("undefined"==typeof e)f=b.value;else{const g=this.language.getMask(e,b.ruleIndex);if("undefined"==typeof g)f=c(e,b.value);else if("string"==typeof g)f=c(g,b.value);else{const h=new RegExp(g[0],"gm"),i=[];let j,k=0;for(;j=h.exec(b.value);)i.push(b.value.substring(k,j.index),c(g[2]||a,d.parse(j[0],g[1],this.languages))),k=h.lastIndex;i.push(b.value.substring(k,b.value.length)),f=c(e,i.join(""))}}return f}render(){let a=0;const b=[];return this.tokens.forEach(c=>{a<c.start&&b.push(this.code.substring(a,c.start)),b.push(this.wrap(c)),a=c.end}),b.push(this.code.substring(a)),b.join("")}}var e=new class{constructor(){this.version="1.0.0",this.languages={},this.activeSchema=void 0}highlight(a,b){return["<pre><code class=\"cc-container\">",d.parse(a,b||this.activeSchema,this.languages),"</code></pre>"].join("")}addSchema(a){return this.languages[a.name]=new b(a.name,a),this.activeSchema=a.name,a.name}};return e});
