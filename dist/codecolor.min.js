/*!
 * Codecolor.js v1.0.0
 * https://codecolorjs.pw/
 *
 * (c) 2018-2019 Daniil Ryazanov <opensource@tagproject.ru>
 * Released under the MIT License.
 */

(function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.codecolor=b()})(this,function(){"use strict";const a={comment:"comment",template:"template",string:"string",fragment:"fragment",number:"number",operator:"operator"},b={keyword:"keyword",primitive:"primitive",builtin:"builtin"};class c{constructor(c,d){this.name=c,this.literalRules=[],this.literalNames=[],this.statementRules=[],this.statementNames=[],this.masks={},Object.keys(a).forEach(a=>{d.literals[a]&&(this.literalRules.push(d.literals[a]),this.literalNames.push(a),d.masks[a]&&(this.masks[a]=d.masks[a]))}),Object.keys(b).forEach(a=>{d.statements[a]&&(this.statementRules.push(d.statements[a]),this.statementNames.push(a))})}eachLiterals(a){this.literalRules.forEach((b,c)=>{b.forEach((b,d)=>{a(this.literalNames[c],b,d)})})}getStatementName(a){const b=a[0];let c,d=0;for(;(c=this.statementRules[d])&&!(c[b]&&~c[b].indexOf(a));)d++;return this.statementNames[d]}getMask(a,b){return this.masks[a][b]}isMasked(a,b){return Array.isArray(this.masks[a])&&!!this.masks[a][b]}}class d{constructor(a,b,c,d){this.name=a,this.value=b,this.start=c,this.end=c+b.length,this.ruleIndex=d}isIncludedIn(a){return this.start>=a.start&&this.end<=a.end}isFragment(){return this.name===a.fragment}}class e{static parse(a,b,c){const d=new e(a,b,c);return d.analize(),d.render()}constructor(a,b,c){this.code=a,this.languages=c,this.language=c[b],this.tokens=[]}analize(){let a,b,c,e,f=NaN;const{tokens:g}=this,h=a=>~~(a/2),i=(a,b)=>{if(b<=g.length&&a<b){if(e=g[b-1],e.end<=c.start)return i(b,b+h(g.length-b+1));if(e.start>=c.end)return i(a,a+h(b-a));if(c.isIncludedIn(e))return NaN;if(e.isIncludedIn(c))return-(b-1)}return b};this.language.eachLiterals((e,j,k)=>{var l=Math.abs,m=Math.max;for(b=new RegExp(j,"gm");a=b.exec(this.code);)c=new d(e,a[0],a.index,k),0<=(f=i(0,m(h(g.length),1)))?g.splice(f,0,c):g[l(f)]=c})}wrap(a){const b=(a,b)=>`<span class="cc-${a}">${b}</span>`,c=a.isFragment()?this.language.getStatementName(a.value):a.name;let d;if("undefined"==typeof c)d=a.value;else if(this.language.isMasked(c,a.ruleIndex)){const f=this.language.getMask(c,a.ruleIndex);if(Array.isArray(f)){const g=new RegExp(f[0],"gm"),h=[];let i,j=0;for(;i=g.exec(a.value);)h.push(a.value.substring(j,i.index),b(f[2],e.parse(i[0],f[1],this.languages))),j=g.lastIndex;h.push(a.value.substring(j,a.value.length)),d=b(c,h.join(""))}else d=b(f,a.value)}else d=b(c,a.value);return d}render(){let a=0;const b=[];return this.tokens.forEach(c=>{a<c.start&&b.push(this.code.substring(a,c.start)),b.push(this.wrap(c)),a=c.end}),b.push(this.code.substring(a)),b.join("")}}var f=new class{constructor(){Object.defineProperty(this,"version",{enumerable:!0,writable:!0,value:"1.0.0"}),Object.defineProperty(this,"languages",{enumerable:!0,writable:!0,value:{}})}highlight(a,b){return["<pre><code class=\"cc-container\">",e.parse(a,b||this.activeSchema,this.languages),"</code></pre>"].join("")}addSchema(a){return this.languages[a.name]=new c(a.name,a),this.activeSchema=a.name,a.name}};return f});
